openshift.withCluster() {
  env.APP_NAME = "${APP_NAME}"
  env.BUILD = openshift.project()
  env.DEV = "${DEV_PROJECT}"
  env.STAGE = "${STAGE_PROJECT}"
  echo "Starting Pipeline for ${APP_NAME}..."
  //env.IMAGE_TAG_NAME = "image-registry.openshift-image-registry.svc:5000/att-dev/nodejs-mongo-demo:v3"
}

pipeline {
  agent {
    label 'node12-agent'
  }


  stages {
    stage('Git Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Unit Test') {


	steps {
      
         //input message: "Wait a sec?", ok: "Promote"

         script {
           sh "node --version"
           //sh "yarn -h"
           //sh "dos2unix -h"
           sh "npm install"
           sh "npm test"
         }
       }
   }


    stage('Build Image') {

       steps {
         script {

            env.IMAGE_TAG_NAME = "image-registry.openshift-image-registry.svc:5000/att-dev/nodejs-mongo-demo:v4"
            sh '''
                df
                ls -lrt
                echo "AP: ${IMAGE_TAG_NAME}"
                oc patch bc nodejs-ex-build -n att-dev --type=json "-p=[{"op": "replace", "path": "/spec/output/to/name", "value": ${IMAGE_TAG_NAME}}]"

                build_pod=$(oc start-build nodejs-ex-build -n att-dev --from-dir=. --wait=true  | awk "{print $1}")
                oc logs -f $build_pod

            '''

         }
       }
   }

    stage('Smoke Test Image') {

       steps {
         script {

            env.IMAGE_TAG_NAME = "image-registry.openshift-image-registry.svc:5000/att-dev/nodejs-mongo-demo:v4"
            sh '''
                echo "Smoke tesing image: ${IMAGE_TAG_NAME}"

            '''

         }
       }
   }


   stage('Deploy DEV') {
      steps {
         script {
            openshift.withCluster() {
              openshift.withProject(env.DEV_PROJECT) {
                openshift.selector("dc", "${APP_NAME}").rollout().latest();
              }
            }
        }
     }
   }

   stage('Promote to Stage') {
      steps {
          timeout(time:15, unit:'MINUTES') {
             input message: "Promote to STAGE?", ok: "Promote"
         }

         script {
            openshift.withCluster() {
                openshift.tag("${env.DEV_PROJECT}/${APP_NAME}:latest", "${env.STAGE_PROJECT}/${APP_NAME}:latest")
            }
        }
     }
   }


   stage('Deploy Stage') {
      steps {
         script {
            openshift.withCluster() {
              openshift.withProject(env.STAGE_PROJECT) {
                openshift.selector("dc", "${APP_NAME}").rollout().latest();
              }
            }
        }
     }
   }


  }
}

println "Application ${env.APP_NAME} is now in Production!"


